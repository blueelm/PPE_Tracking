@page "/graph"
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@using PPE_Tracking.Data
@inject IDataSource dataSource

<h3>Stock QOH History</h3>
@if (PPE_Worker_Service.Worker.TrackedStocks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <RadzenSplitButton Click="@((args) => Click(args))" Text=@qohType Style="margin-bottom: 20px;">
                <ChildContent>
                    <RadzenSplitButtonItem Text="QOH" Value="1" />
                    <RadzenSplitButtonItem Text="QOH Unit of Issue" Value="2" />
                </ChildContent>
            </RadzenSplitButton>
        </div>
        <div class="col-md-4">
            <b>From: </b><RadzenDatePicker @bind-Value="fromValue" TValue="DateTime?" ShowTime="true" Change="@(async (args) => await Change(args, "from"))" DateFormat="MM/dd/yyyy HH:mm" />
        </div>
        <div class="col-md-4">
            <b>Through: </b><RadzenDatePicker @bind-Value="thruValue" TValue="DateTime?" ShowTime="true" Change="@(async (args) => await Change(args, "thru"))" DateFormat="MM/dd/yyyy HH:mm" />
        </div>
    </div>
    <ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />
}
@code {
    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;
    LineDataset<TimeTuple<long>> _tempDataSet;
    DateTime? fromValue = DateTime.Now.AddDays(0 - 7);
    DateTime? thruValue = DateTime.Now;
    string qohType = "QOH";
    bool qohUi = false;

    protected override async Task OnInitializedAsync()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Stock QOH"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
{
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "QOH"
                            }
                        }
                    },
                    xAxes = new List<CartesianAxis>
{
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Millisecond,
                                Round = TimeMeasurement.Millisecond,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        await GetData();

    }

    private async Task GetData()
    {
        var stocks = PPE_Worker_Service.Worker.TrackedStocks;
        foreach (var stock in stocks.Values)
        {
            _tempDataSet = new LineDataset<TimeTuple<long>>
            {
                BackgroundColor = ColorUtil.RandomColorString(),
                BorderColor = ColorUtil.RandomColorString(),
                Label = $"{stock.Inventory};{stock.StockNumber}",
                Fill = false,
                BorderWidth = 2,
                PointRadius = 3,
                PointBorderWidth = 1,
                SteppedLine = SteppedLine.False
            };


            var history = await dataSource.GetHistory(stock.StockID, fromValue, thruValue, qohUi);
            foreach (var tuple in history)
            {
                _tempDataSet.Add(new TimeTuple<long>(new Moment(PPE_Worker_Service.Worker.ConvertFromUnixTimestamp(tuple.Item1)), tuple.Item2));
            }
            _lineConfig.Data.Datasets.Add(_tempDataSet);
        }
    }

    private async Task OnClick()
    {
        _tempDataSet.Fill = !_tempDataSet.Fill;
        await _lineChartJs.Update();
    }



    async Task Change(DateTime? value, string name)
    {
        _lineConfig.Data.Datasets.Clear();
        await GetData();
    }

    async Task Click(RadzenSplitButtonItem item)
    {
        if (item == null)
            return;
        if (item.Value == qohType)
            return;

        if (item.Value == "1")
            qohType = "QOH";
        else
            qohType = "QOH Unit of Issue";
        qohUi = !qohUi;

        _lineConfig.Data.Datasets.Clear();
        await GetData();
    }

}
